name: CI/CD Pipeline (Local Simulation)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  IMAGE_TAG: app-local:latest
  PROJECT_DIR: Group2Assignment1
  OUTPUT_DIR: Group2Assignment1/outputs
  CONTAINER_NAME: diet-app

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies (project folder)
        run: |
          python -m pip install --upgrade pip
          if [ -f "${{ env.PROJECT_DIR }}/requirements.txt" ]; then pip install -r "${{ env.PROJECT_DIR }}/requirements.txt"; fi
          pip install pytest || true
          pip install flake8 || true

      - name: Lint (non-blocking)
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          if command -v flake8 >/dev/null 2>&1; then
            flake8 . || true
          fi

      - name: Run tests (or skip)
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          if compgen -G "tests/test_*.py" > /dev/null; then
            pytest -q
          else
            echo "No tests found. Skipping."
          fi

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image (project subfolder)
        uses: docker/build-push-action@v6
        with:
          context: ./Group2Assignment1
          file: ./Group2Assignment1/Dockerfile
          push: false
          tags: ${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  simulate_deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Create host outputs dir
        run: mkdir -p "${{ github.workspace }}/${{ env.OUTPUT_DIR }}"

      - name: Run container and collect outputs
        run: |
          docker run --name "${{ env.CONTAINER_NAME }}" --rm \
            -v "${{ github.workspace }}/${{ env.OUTPUT_DIR }}:/app/outputs" \
            ${{ env.IMAGE_TAG }}

      - name: List collected outputs
        run: |
          echo "Files in ${{ env.OUTPUT_DIR }}:"
          ls -la "${{ env.OUTPUT_DIR }}" || true

      - name: Upload analysis outputs
        uses: actions/upload-artifact@v4
        with:
          name: analysis-outputs
          path: ${{ env.OUTPUT_DIR }}/
          if-no-files-found: warn
