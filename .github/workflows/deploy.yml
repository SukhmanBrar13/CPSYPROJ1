name: CI/CD Pipeline (Local Simulation)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  IMAGE_TAG: app-local:latest
  CONTAINER_NAME: diet-app
  OUTPUT_DIR: outputs

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest || true
          pip install flake8 || true
      - name: Lint (non-blocking)
        run: |
          if command -v flake8 >/dev/null 2>&1; then
            flake8 . || true
          fi
      - name: Run tests (or skip if none)
        run: |
          if compgen -G "tests/test_*.py" > /dev/null; then
            pytest -q
          else
            echo "No tests found. Skipping."
          fi

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build image (local tag)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: ${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  simulate_deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Ensure outputs directory exists
        run: mkdir -p "${{ github.workspace }}/${{ env.OUTPUT_DIR }}"
      - name: Run container and collect outputs
        run: |
          docker run --name "${{ env.CONTAINER_NAME }}" --rm \
            -v "${{ github.workspace }}/${{ env.OUTPUT_DIR }}:/app/outputs" \
            ${{ env.IMAGE_TAG }}
      - name: List collected outputs
        run: |
          echo "Files in ${{ env.OUTPUT_DIR }}:"
          ls -la "${{ env.OUTPUT_DIR }}" || true
      - name: Upload analysis outputs
        uses: actions/upload-artifact@v4
        with:
          name: analysis-outputs
          path: ${{ env.OUTPUT_DIR }}/
          if-no-files-found: warn
